#import(nl.lumc.sasc.biopet.utils.summary.db.SummaryDb)
#import(nl.lumc.sasc.biopet.core.report.ReportPage)
#import(scala.concurrent.Await)
#import(scala.concurrent.duration.Duration)
#import(nl.lumc.sasc.biopet.pipelines.bammetrics.BammetricsReport)
#import(java.io.File)
<%@ var summary: SummaryDb %>
<%@ var sampleId: Option[Int] = None %>
<%@ var libId: Option[Int] = None %>
<%@ var sampleLevel: Boolean = false %>
<%@ var rootPath: String %>
<%@ var outputDir: File %>
<%@ var showPlot: Boolean = false %>
<%@ var showTable: Boolean = true %>
<%@ var showIntro: Boolean = true%>
<%@ var runId: Int %>
<%@ var fields: List[String] = List("min", "max", "mean", "median", "modal")%>
#{
    val samples = Await.result(summary.getSamples(runId = Some(runId)), Duration.Inf)
}#

#if (showIntro)
    <br/>
    <div class="row">
    <div class="col-md-1"></div>
    <div class="col-md-6">
        <p>
        #if (sampleId.isDefined && libId.isDefined)
            This plot shows the clipping distribution for library <b>${libId}</b> of sample <b>${sampleId}</b>.
        #elseif(sampleId.isDefined)
            This plot shows the clipping distribution for the libraries of sample <b>${sampleId}</b>.
        #else
            This plot shows the clipping distribution for each of the <b>${samples.size}</b> samples.
        #end
        </p>
    </div>
    </div>
#end

#if (showPlot)
    #{ BammetricsReport.clippingPlot(outputDir, "clipping", summary, !sampleLevel, sampleId = sampleId, libraryId = libId) }#

    <div class="panel-body">
    <img src="clipping.png" class="img-responsive" />
    </div>
    <div class="panel-footer">
        #if (showTable)
            <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#clippingTable">
                <i class="glyphicon glyphicon-eye-close"></i> Hide table</button>
        #else
            <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#clippingTable">
            <i class="glyphicon glyphicon-eye-open"></i> Show table</button>
        #end
      <a href="clipping.tsv"><button type="button" class="btn btn-info"><i class="glyphicon glyphicon-cloud-download"></i>TSV file</button></a>

    </div>
#end

<div class="panel-body collapse #if (showTable)in#end" id="clippingTable">
<!-- Table -->
<table class="table">
    <thead><tr>
        <th data-sorted="true" data-sorted-direction="ascending">Sample</th>
        #if (!sampleLevel) <th>Library</th> #end
        #for (field <- fields)
            <th>${field.replaceAll("_", " ")}</th>
        #end
    </tr></thead>
    <tbody>
        #for (sample <- samples.sortBy(_.name))
            #{
                val libs: List[Option[Int]] = (libId, sampleLevel) match {
                case (_, true) => List(None)
                case (Some(_), _) => List(libId)
                case _ => Await.result(summary.getLibraries(sampleId = Some(sample.id), runId = Some(runId)), Duration.Inf).map(x => Some(x.id)).toList
                }
            }#
            <tr><td rowspan="${libs.size}"><a href="${rootPath}Samples/${sample}/index.html">${sample}</a></td>
            #for (libId <- libs)
                #if (libs.head != libId) <tr> #end
                    #if (!sampleLevel) <td><a href="${rootPath}Samples/${sample}/Libraries/${libId}/index.html">${libId}</a></td> #end
                    #{
                        val statsPaths = fields.map(x => x -> List("clipping", "general", x)).toMap
                        val results = summary.getStatKeys(runId, Right("bammetrics"), Some(Right("bamstats")), sample = Some(Left(sample.id)), library = libId.map(Left(_)), keyValues = statsPaths)
                    }#
                    #for (field <- fields)
                        <td>${results(field)}</td>
                    #end
                </tr>
            #end
        #end
    </tbody>
</table>

</div>
