#import(nl.lumc.sasc.biopet.core.summary.Summary)
#import(nl.lumc.sasc.biopet.core.report.ReportPage)
#import(nl.lumc.sasc.biopet.pipelines.flexiprep.FlexiprepReport)
#import(java.io.File)
<%@ var summary: Summary %>
<%@ var sampleId: Option[String] = None %>
<%@ var libId: Option[String] = None %>
<%@ var rootPath: String %>
<%@ var outputDir: File %>
<%@ var showPlot: Boolean = false %>
<%@ var showTable: Boolean = true %>
#{
    val samples = sampleId match {
        case Some(sample) => List(sample.toString)
        case _ => summary.samples.toList
    }
}#
#if (showPlot)
    #{
        FlexiprepReport.baseSummaryPlot(outputDir, "QC_Bases_R1","R1", summary, sampleId = sampleId)
        FlexiprepReport.baseSummaryPlot(outputDir, "QC_Bases_R2","R2", summary, sampleId = sampleId)
    }#
    <div class="panel-body">
        <div class="row">
            <div class="col-sm-6 col-md-6">
                <img src="QC_Bases_R1.png" class="img-responsive" />
            </div>
            <div class="col-sm-6 col-md-6">
                <img src="QC_Bases_R2.png" class="img-responsive" />
            </div>
        </div>

    </div>
    <div class="panel-footer">
        <i class="glyphicon glyphicon-file"></i> <a href="QC_Bases_R1.tsv">R1 reads stats</a> -
        <i class="glyphicon glyphicon-file"></i> <a href="QC_Bases_R2.tsv">R2 reads stats</a>
    </div>
#end
#if (showTable)
    <div class="panel-body">

    <!-- Table -->
    <table class="table sortable-theme-bootstrap" data-sortable>

        <thead><tr>
            <th data-sorted="true" data-sorted-direction="ascending">Sample</th>
            <th colspan="2">Library</th>
            <th>Before QC</th>
            <th>Discarded</th>
            <th>(%)</th>
            <th>After QC</th>
        </tr></thead>
        <tbody>
            #for (sample <- samples.toList.sorted)
                #{
                    val libs = libId match {
                    case Some(libId) => List(libId.toString)
                    case _ => summary.libraries(sample).toList
                    }

                    val sampleRowspan = {
                    libs.size +
                    libs.count(summary.getLibraryValue(sample, _, "flexiprep", "settings", "paired").getOrElse(false) == true)
                    }
                }#
                <tr><td rowspan="${sampleRowspan}"><a href="${rootPath}Samples/${sample}/index.html">${sample}</a></td>
                #for (libId <- libs)
                    #if (libs.head != libId) <tr> #end
                        #{ val paired = summary.getLibraryValue(sample, libId, "flexiprep", "settings", "paired").getOrElse(false) }#
                        <td #if (paired == true) rowspan="2" #end><a href="${rootPath}Samples/${sample}/Libraries/${libId}/index.html">${libId}</a></td>
                        #{ val reads = if (paired == true) List("R1", "R2") else List("R1") }#
                        #for (read <- reads)
                            #if (read == "R2") </tr><tr> #end
                            #{
                                val beforeTotal = summary.getLibraryValue(sample, libId, "flexiprep", "stats", "seqstat_" + read, "bases", "num_total").getOrElse(0).asInstanceOf[Long]
                                val afterTotal = summary.getLibraryValue(sample, libId, "flexiprep", "stats", "seqstat_" + read + "_after", "bases", "num_total").getOrElse(0).asInstanceOf[Long]
                            }#
                            <td>${read}</td>
                            <td>${beforeTotal}</td>
                            <td>${beforeTotal - afterTotal}</td>
                            <td>${(beforeTotal - afterTotal).toDouble / beforeTotal * 100}%</td>
                            <td>${afterTotal}</td>
                        #end
                    </tr>
                #end
            #end
        </tbody>
    </table>

    </div>
#end