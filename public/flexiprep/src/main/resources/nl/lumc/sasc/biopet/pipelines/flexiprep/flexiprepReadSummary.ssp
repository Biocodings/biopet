#import(nl.lumc.sasc.biopet.core.summary.Summary)
#import(nl.lumc.sasc.biopet.core.report.ReportPage)
<%@ var summary: Summary %>
<%@ var sampleId: Option[String] = None %>
<%@ var libId: Option[String] = None %>
#{
    val samples = sampleId match {
        case Some(sample) => List(sample.toString)
        case _ => summary.samples.toList
    }
}#
<table>
<thead><tr>
    <th>Sample</th>
    <th colspan="2">Library</th>
    <th>Before QC</th>
    <th>Clipping</th>
    <th>Trimming</th>
    <th>After QC</th>
</tr></thead>
<tbody>
    #for (sample <- samples.toList.sorted)
        #{
            val libs = libId match {
                case Some(libId) => List(libId.toString)
                case _ => summary.libraries(sample).toList
            }
            val sampleRowspan = {
                libs.size +
                libs.count(summary.getLibraryValue(sample, _, "flexiprep", "settings", "paired").getOrElse(false) == true)
            }
        }#
        <tr><td rowspan="${sampleRowspan}">${sample}</td>
        #for (libId <- libs)
            #if (libs.head != libId) <tr> #end
            #{ val paired = summary.getLibraryValue(sample, libId, "flexiprep", "settings", "paired").getOrElse(false) }#
            <td #if (paired == true) rowspan="2" #end>${libId}</td>
            #{ val reads = if (paired == true) List("R1", "R2") else List("R1") }#
            #for (read <- reads)
                #if (read == "R2") </tr><tr> #end
                #{
                    val beforeTotal = summary.getLibraryValue(sample, libId, "flexiprep", "stats", "seqstat_" + read, "reads", "num_total")
                    val afterTotal = summary.getLibraryValue(sample, libId, "flexiprep", "stats", "seqstat_" + read + "_after", "reads", "num_total")
                    val clippingDiscardedToShort = summary.getLibraryValue(sample, libId, "flexiprep", "stats", "clipping_" + read, "num_reads_discarded_too_short").getOrElse(0).asInstanceOf[Long]
                    val clippingDiscardedToLong = summary.getLibraryValue(sample, libId, "flexiprep", "stats", "clipping_" + read, "num_reads_discarded_too_long").getOrElse(0).asInstanceOf[Long]
                    val trimmingDiscarded = summary.getLibraryValue(sample, libId, "flexiprep", "stats", "trimming", "num_reads_discarded_" + read).getOrElse(0).asInstanceOf[Long]
                }#
                <td>${read}</td>
                <td>${beforeTotal}</td>
                <td>${clippingDiscardedToShort + clippingDiscardedToLong}</td>
                <td>${trimmingDiscarded}</td>
                <td>${afterTotal}</td>
            #end
            </tr>
        #end
    #end
</tbody>
</table>