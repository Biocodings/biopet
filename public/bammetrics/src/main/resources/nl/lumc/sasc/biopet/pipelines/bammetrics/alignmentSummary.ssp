#import(nl.lumc.sasc.biopet.core.summary.Summary)
#import(nl.lumc.sasc.biopet.core.report.ReportPage)
#import(nl.lumc.sasc.biopet.pipelines.bammetrics.BammetricsReport)
#import(java.io.File)
<%@ var summary: Summary %>
<%@ var sampleId: Option[String] = None %>
<%@ var libId: Option[String] = None %>
<%@ var sampleLevel: Boolean = false %>
<%@ var rootPath: String %>
<%@ var outputDir: File %>
<%@ var showPlot: Boolean = false %>
<%@ var showTable: Boolean = true %>
#{
    val samples = sampleId match {
        case Some(sample) => {
            List(sample.toString)
        }
        case _ => summary.samples.toList
    }
}#

#if (showPlot)
#{ BammetricsReport.alignmentSummaryPlot(outputDir, "alignmentSummary", summary, !sampleLevel, sampleId = sampleId) }#

    <div class="panel-body">
        <img src="alignmentSummary.png" class="img-responsive" />
    </div>
        <div class="panel-footer">
            <i class="glyphicon glyphicon-file"></i> <a href="alignmentSummary.tsv">tsv file</a>
        </div>
#end
#if (showTable)

    <div class="panel-body">
    <!-- Table -->
    <table class="table sortable-theme-bootstrap" data-sortable>
        <thead><tr>
            <th data-sorted="true" data-sorted-direction="ascending">Sample</th>
            #if (!sampleLevel) <th>Library</th> #end
            <th>Total</th>
            <th>Mapped</th>
            <th>(%)</th>
            <th>Duplicates</th>
            <th>(%)</th>
            <th>Insert size</th>
        </tr></thead>
        <tbody>
            #for (sample <- samples.toList.sorted)
                #{
                    val libs = (libId, sampleLevel) match {
                    case (_, true) => List("")
                    case (Some(libId), _) => List(libId.toString)
                    case _ => summary.libraries(sample).toList
                    }
                }#
                <tr><td rowspan="${libs.size}"><a href="${rootPath}Samples/${sample}/index.html">${sample}</a></td>
                #for (libId <- libs)
                    #if (libs.head != libId) <tr> #end
                        #if (!sampleLevel) <td><a href="${rootPath}Samples/${sample}/Libraries/${libId}/index.html">${libId}</a></td> #end
                        #{
                            val prefixPath = List("samples", sample) ::: (if (libId.isEmpty) Nil else List("libraries", libId)) ::: List("bammetrics", "stats")
                            val total = summary.getValue((prefixPath ::: List("biopet_flagstat", "All")):_*).getOrElse(0L).asInstanceOf[Long]
                            val mapped = summary.getValue((prefixPath ::: List("biopet_flagstat", "Mapped")):_*).getOrElse(0L).asInstanceOf[Long]
                            val duplicates = summary.getValue((prefixPath ::: List("biopet_flagstat", "Duplicates")):_*).getOrElse(0L).asInstanceOf[Long]
                            val insertsizeMean = summary.getValue((prefixPath ::: List("insert_size_metrics", "mean_insert_size")):_*)
                        }#
                        <td>${total}</td>
                        <td>${mapped}</td>
                        <td>${mapped.toDouble / total * 100}%</td>
                        <td>${duplicates}</td>
                        <td>${duplicates.toDouble / total * 100}%</td>
                        <td>${insertsizeMean}</td>
                    </tr>
                #end
            #end
        </tbody>
    </table>

    </div>

#end