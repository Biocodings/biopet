#import(nl.lumc.sasc.biopet.utils.summary.Summary)
#import(java.io.File)
<%@ var rootPath: String %>
<%@ var outputDir: File %>
<%@ var summary: Summary %>
<%@ var showPlot: Boolean = false %>
<%@ var showTable: Boolean = true %>
<%@ var showIntro: Boolean = true %>

#{
    val sampleNames: List[String] = summary.samples.toList.sorted

    val counts: Map[String, Map[String, Array[Any]]] = ShivaSvCallingReport.parseSummaryForSvCounts(summary)

    var svTypes = List(
    SvTypeForReport("DEL", "Deletions", "svSummaryDeletions.tsv", "svSummaryDeletions.png"),
    SvTypeForReport("DUP", "Duplications", "svSummaryDuplications.tsv", "svSummaryDuplications.png"),
    SvTypeForReport("INS", "Insertions", "svSummaryInsertions.tsv", "svSummaryInsertions.png"),
    SvTypeForReport("INV", "Inversions", "svSummaryInversions.tsv", "svSummaryInversions.png"))
    svTypes = svTypes.filter(sv => counts.contains(sv.svType))
    val tsvAllTypes = "svSummary.tsv"

    ShivaSvCallingReport.writeTsvFiles(sampleNames, counts, svTypes, tsvAllTypes, outputDir)
    ShivaSvCallingReport.createPlots(svTypes, outputDir)
}#


#if (showPlot)
    <div class="panel-body">
    #for (sv <- svTypes)
        <img src="${sv.pngFileName}" />
    #end
    </div>
    <div class="panel-footer">
    #if (showTable)
        <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#svSummaryTable">Hide table</button>
    #else
        <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#svSummaryTable">Show table</button>
    #end
    <i class="glyphicon glyphicon-file"></i> <a href="${tsvAllTypes}">tsv file</a>
    </div>
#end

<div class="panel-body collapse #if (showTable)in#end" id="svSummaryTable">

#for (sv <- svTypes)
#{
    val countsForSvType: Map[String, Array[Any]] = counts.get(sv.svType).get
}#
<h3>${sv.displayText}</h3>
<table class="table sortable-theme-bootstrap" data-sortable>
    <thead><tr><th data-sorted="true" data-sorted-direction="ascending">Sample</th>
        #for (text <- ShivaSvCallingReport.histogramText)
            <th>${text}</th>
         #end
    </tr></thead>
    <tbody>
        #for (sampleName <- sampleNames)
            <tr>
            <td><a href="${rootPath}Samples/${sampleName}/index.html">${sampleName}</a></td>
            #for (countForSize <- countsForSvType.get(sampleName).get)
                <td>${countForSize}</td>
            #end
            </tr>
        #end
    </tbody>
</table>

#end
</div>
